#!/bin/bash

# Get a valid device name
# taken as parameter
#str=$(lsblk -d -J | jq -r -c '.blockdevices | map(.name) | .[-1]' )
#next=$(echo "${str: -1}" | tr '[a-y]z' '[b-z]a')
#deviceId="/dev/xvd$next"

ebs=$1 #"vol-0342621a9c6047908"
deviceId=$2

# Attach the volume
aws ec2 attach-volume --device $deviceId --volume-id $ebs --instance-id $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
aws ec2 wait volume-in-use --volume-ids $ebs

sleep 2
deviceId=/dev/$(lsblk | tail -1 | awk '{print $1}')
echo "ciao $deviceId"

retries=5
while [[ ! -e $deviceId ]]
    do
        if (( retries-- == 0 ))
            then echo >&2 '$deviceId never came up'
            aws ec2 detach-volume --volume-id $ebs
            exit 1
        fi
        sleep 1
    done
echo '$deviceId came up'

# with nvme driver the real device is nvmeXn1 symlinked. 
zar=$(readlink $deviceId )
echo ":::"
readlink $deviceId
echo "[$zar]"
echo ":::"

if [ -z "$zar" ]; then
  # do nothing
  echo "valid device"
else
  deviceId=$(readlink -e $deviceId )
  echo "Reolved symlink to $zar"
fi


# Format if the fs is `data`
currentfs=$(file -s $deviceId | awk '{print $2}')
echo file -s $deviceId 
echo "[$currentfs]"

if [ "$currentfs" = "data" ]; then
	echo "FORMATTO"
	mkfs -t xfs $deviceId
else
	echo "non formatto - ma stai perdendo tempo"
fi

# Now detach the volume. It will be mounted on docker run
aws ec2 detach-volume --volume-id $ebs
